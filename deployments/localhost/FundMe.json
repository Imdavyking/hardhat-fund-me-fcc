{
  "address": "0xD13eF4dDD130BD0E0E8C1FF01d00849512237c40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe68702901e826e3be23e7de023d1bae783f236dcb7504dc5e5dd2e0a701f39c3",
  "receipt": {
    "to": null,
    "from": "0xA853E330e77694a76B69574e7dD8f511e5F3dc11",
    "contractAddress": "0xD13eF4dDD130BD0E0E8C1FF01d00849512237c40",
    "transactionIndex": 0,
    "gasUsed": "1043405",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb9de2ecfec2f4b06f827d0be0bffc17aece254f5f9fb580b54dbaac163d36340",
    "transactionHash": "0xe68702901e826e3be23e7de023d1bae783f236dcb7504dc5e5dd2e0a701f39c3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1043405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe40ac37F58eD4FFbE7723C7258Be8802999389dd"
  ],
  "numDeployments": 1,
  "solcInputHash": "efa8f8813d53a5063264f68797904a7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n/**@title A contract for crowd funding\\n * @author Patrick Collins\\n * @notice This contract is to demo a sample\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private /* immutable */ i_owner;\\n    uint256 private constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        \\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders;\\n        for(uint256 funderIndex = 0; funderIndex < funders.length;funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address){\\n        return i_owner;\\n    }\\n\\n\\n    function getFunder(uint256 index) public view returns (address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns (uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\\n\",\"keccak256\":\"0xc16903414b1742c8034de21e1114ddd75651db639aeccb30b6174d0b48302a7c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xf75d0f778a899751561683077500ff2cc3addd2971ec64bdbd07ec46797dcefa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012903803806200129083398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b611124806200016c6000396000f3fe6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd146100f4578063b60d42881461011f578063be2693f014610129578063d7b4750c1461013357610070565b80630343fb25146100755780633ccfd60b146100b2578063893d20e8146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610a5c565b610170565b6040516100a99190610aa2565b60405180910390f35b3480156100be57600080fd5b506100c76101b8565b005b3480156100d557600080fd5b506100de6103fa565b6040516100eb9190610acc565b60405180910390f35b34801561010057600080fd5b50610109610424565b6040516101169190610b46565b60405180910390f35b61012761044e565b005b610131610588565b005b34801561013f57600080fd5b5061015a60048036038101906101559190610b8d565b61082e565b6040516101679190610acc565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102ea5760006001828154811061026557610264610bba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102e290610c18565b915050610242565b50600067ffffffffffffffff81111561030657610305610c61565b5b6040519080825280602002602001820160405280156103345781602001602082028036833780820191505090505b506001908051906020019061034a929190610952565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161037190610cc1565b60006040518083038185875af1925050503d80600081146103ae576040519150601f19603f3d011682016040523d82523d6000602084013e6103b3565b606091505b50509050806103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90610d33565b60405180910390fd5b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061048d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087690919063ffffffff16565b10156104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590610d9f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461051c9190610dbf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561069357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610649575b5050505050905060005b815181101561071d5760008282815181106106bb576106ba610bba565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071590610c18565b91505061069d565b50600067ffffffffffffffff81111561073957610738610c61565b5b6040519080825280602002602001820160405280156107675781602001602082028036833780820191505090505b506001908051906020019061077d929190610952565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107a490610cc1565b60006040518083038185875af1925050503d80600081146107e1576040519150601f19603f3d011682016040523d82523d6000602084013e6107e6565b606091505b505090508061082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082190610d33565b60405180910390fd5b5050565b60006001828154811061084457610843610bba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610882836108b2565b90506000670de0b6b3a7640000858361089b9190610e15565b6108a59190610e9e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fb57600080fd5b505afa15801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190610f5c565b5050509150506402540be4008161094a9190610fd7565b915050919050565b8280548282559060005260206000209081019282156109cb579160200282015b828111156109ca5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610972565b5b5090506109d891906109dc565b5090565b5b808211156109f55760008160009055506001016109dd565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a29826109fe565b9050919050565b610a3981610a1e565b8114610a4457600080fd5b50565b600081359050610a5681610a30565b92915050565b600060208284031215610a7257610a716109f9565b5b6000610a8084828501610a47565b91505092915050565b6000819050919050565b610a9c81610a89565b82525050565b6000602082019050610ab76000830184610a93565b92915050565b610ac681610a1e565b82525050565b6000602082019050610ae16000830184610abd565b92915050565b6000819050919050565b6000610b0c610b07610b02846109fe565b610ae7565b6109fe565b9050919050565b6000610b1e82610af1565b9050919050565b6000610b3082610b13565b9050919050565b610b4081610b25565b82525050565b6000602082019050610b5b6000830184610b37565b92915050565b610b6a81610a89565b8114610b7557600080fd5b50565b600081359050610b8781610b61565b92915050565b600060208284031215610ba357610ba26109f9565b5b6000610bb184828501610b78565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2382610a89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c5657610c55610be9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cab600083610c90565b9150610cb682610c9b565b600082019050919050565b6000610ccc82610c9e565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d1d600b83610cd6565b9150610d2882610ce7565b602082019050919050565b60006020820190508181036000830152610d4c81610d10565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d89601b83610cd6565b9150610d9482610d53565b602082019050919050565b60006020820190508181036000830152610db881610d7c565b9050919050565b6000610dca82610a89565b9150610dd583610a89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0a57610e09610be9565b5b828201905092915050565b6000610e2082610a89565b9150610e2b83610a89565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6457610e63610be9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea982610a89565b9150610eb483610a89565b925082610ec457610ec3610e6f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eee81610ecf565b8114610ef957600080fd5b50565b600081519050610f0b81610ee5565b92915050565b6000819050919050565b610f2481610f11565b8114610f2f57600080fd5b50565b600081519050610f4181610f1b565b92915050565b600081519050610f5681610b61565b92915050565b600080600080600060a08688031215610f7857610f776109f9565b5b6000610f8688828901610efc565b9550506020610f9788828901610f32565b9450506040610fa888828901610f47565b9350506060610fb988828901610f47565b9250506080610fca88828901610efc565b9150509295509295909350565b6000610fe282610f11565b9150610fed83610f11565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102c5761102b610be9565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106957611068610be9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a6576110a5610be9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e3576110e2610be9565b5b82820290509291505056fea2646970667358221220125a8f24c2beaac00e3a7205034ed3ba6c34ec59d1276783ed9e62f97346b17164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd146100f4578063b60d42881461011f578063be2693f014610129578063d7b4750c1461013357610070565b80630343fb25146100755780633ccfd60b146100b2578063893d20e8146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610a5c565b610170565b6040516100a99190610aa2565b60405180910390f35b3480156100be57600080fd5b506100c76101b8565b005b3480156100d557600080fd5b506100de6103fa565b6040516100eb9190610acc565b60405180910390f35b34801561010057600080fd5b50610109610424565b6040516101169190610b46565b60405180910390f35b61012761044e565b005b610131610588565b005b34801561013f57600080fd5b5061015a60048036038101906101559190610b8d565b61082e565b6040516101679190610acc565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102ea5760006001828154811061026557610264610bba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102e290610c18565b915050610242565b50600067ffffffffffffffff81111561030657610305610c61565b5b6040519080825280602002602001820160405280156103345781602001602082028036833780820191505090505b506001908051906020019061034a929190610952565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161037190610cc1565b60006040518083038185875af1925050503d80600081146103ae576040519150601f19603f3d011682016040523d82523d6000602084013e6103b3565b606091505b50509050806103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90610d33565b60405180910390fd5b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061048d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087690919063ffffffff16565b10156104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590610d9f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461051c9190610dbf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561069357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610649575b5050505050905060005b815181101561071d5760008282815181106106bb576106ba610bba565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071590610c18565b91505061069d565b50600067ffffffffffffffff81111561073957610738610c61565b5b6040519080825280602002602001820160405280156107675781602001602082028036833780820191505090505b506001908051906020019061077d929190610952565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107a490610cc1565b60006040518083038185875af1925050503d80600081146107e1576040519150601f19603f3d011682016040523d82523d6000602084013e6107e6565b606091505b505090508061082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082190610d33565b60405180910390fd5b5050565b60006001828154811061084457610843610bba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610882836108b2565b90506000670de0b6b3a7640000858361089b9190610e15565b6108a59190610e9e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fb57600080fd5b505afa15801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190610f5c565b5050509150506402540be4008161094a9190610fd7565b915050919050565b8280548282559060005260206000209081019282156109cb579160200282015b828111156109ca5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610972565b5b5090506109d891906109dc565b5090565b5b808211156109f55760008160009055506001016109dd565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a29826109fe565b9050919050565b610a3981610a1e565b8114610a4457600080fd5b50565b600081359050610a5681610a30565b92915050565b600060208284031215610a7257610a716109f9565b5b6000610a8084828501610a47565b91505092915050565b6000819050919050565b610a9c81610a89565b82525050565b6000602082019050610ab76000830184610a93565b92915050565b610ac681610a1e565b82525050565b6000602082019050610ae16000830184610abd565b92915050565b6000819050919050565b6000610b0c610b07610b02846109fe565b610ae7565b6109fe565b9050919050565b6000610b1e82610af1565b9050919050565b6000610b3082610b13565b9050919050565b610b4081610b25565b82525050565b6000602082019050610b5b6000830184610b37565b92915050565b610b6a81610a89565b8114610b7557600080fd5b50565b600081359050610b8781610b61565b92915050565b600060208284031215610ba357610ba26109f9565b5b6000610bb184828501610b78565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2382610a89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c5657610c55610be9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cab600083610c90565b9150610cb682610c9b565b600082019050919050565b6000610ccc82610c9e565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d1d600b83610cd6565b9150610d2882610ce7565b602082019050919050565b60006020820190508181036000830152610d4c81610d10565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d89601b83610cd6565b9150610d9482610d53565b602082019050919050565b60006020820190508181036000830152610db881610d7c565b9050919050565b6000610dca82610a89565b9150610dd583610a89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0a57610e09610be9565b5b828201905092915050565b6000610e2082610a89565b9150610e2b83610a89565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6457610e63610be9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea982610a89565b9150610eb483610a89565b925082610ec457610ec3610e6f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eee81610ecf565b8114610ef957600080fd5b50565b600081519050610f0b81610ee5565b92915050565b6000819050919050565b610f2481610f11565b8114610f2f57600080fd5b50565b600081519050610f4181610f1b565b92915050565b600081519050610f5681610b61565b92915050565b600080600080600060a08688031215610f7857610f776109f9565b5b6000610f8688828901610efc565b9550506020610f9788828901610f32565b9450506040610fa888828901610f47565b9350506060610fb988828901610f47565b9250506080610fca88828901610efc565b9150509295509295909350565b6000610fe282610f11565b9150610fed83610f11565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102c5761102b610be9565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106957611068610be9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a6576110a5610be9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e3576110e2610be9565b5b82820290509291505056fea2646970667358221220125a8f24c2beaac00e3a7205034ed3ba6c34ec59d1276783ed9e62f97346b17164736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}